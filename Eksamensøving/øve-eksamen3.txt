Oppgave 1
a)
    aliaser - To variable er aliaser når de refererer til samme objekt.

    return - Reservert nøkkelord som brukes for at funksjoner skal retunere ein eller fleire verdier tilbake til funksjonskallet. Uten return vil funksjonen retunere None. Funksjoner med 'return' kalles resultatfunksjoner eller fruitful functions. Funksjoner som ikke retunerer noko kalles tomme funksjoner (void). 

    nonlocal - Reservert nøkkelord som utvider skop'et (område ein variabel er synlig) fra lokalt inne i ein funksjon og ut til å gjelde fra ein ytterfunskjon. Dette er nyttig i tilfeller der ein definerer funksjoner inne i andre funksjon å vil at ha tilgang til ein variabel eller mulighet til å endre ein variabel fra ytterfunksjonen i den innerste.

    .mainloop() er ansvarlig for hendelsesløkken i et GUI program og er ein innebygd funksjon i tkinter. mainloopen kjøres på rotvinduet slik: rotvindu = Tk() #*1: gitt at ein importert alt fra tkinter slik: 'from tkinter import *'.
    rotvindu.mainloop(). #*1
    Mainloop holder rede på alle GUI-elementene (widgets) og registerer og oppdaterer vinduet basert på hvordan brukeren interakterer med dei.

b)
    1. Usant
    2. Sant
    3. Sant
    4. Sant
    5. Sant
    6. Usant
    7. Sant
    8. Usant
    9. Usant
    10. Sant

c)
    1. 2 + 3 = 5 (1)
    2. HippHipp Hurra! (1)
    3. ['og', 'kaldt', 'og', 'breiflabb'] (1)
    4. ['c', 'd'] (1)
    5. hipp hurrahurra hipp (1)
    6. False (1)
    7. 3 4 (1)
    8. 321 (1)
    9. 6 (1)
    10. [1, 5, 7, 8, 10] (1)

d)
    map->filter
    GUI->StringVar()
    open->fil
    break->continue
    global->skop
    klasse->arv
    fortegnelse->.values()
    delstreng->.find
    parameter->argument

Oppgave 2
a)
    1. True
    2. False
    3. True
    4. False
    5. True
    6. False
    7. False
    8. False
    9. True
    10. True

b)
    1.  Velkommen Liv
        Velkommen Ole
        Liv
        Ole

    2.  0 11
        1 9
        2 7
        3 5
    
    3.  [2,3,4]
        [6,7]
        [9,10,11]

    4.  1
        1
        2
        3
        4
    
    5.  a1
        a2
        b1
        b2
        c1
        c2

c)
    def tell(tekst, bokstav):
        #bruker den innebygde funksjonen count for å telle forekomster av bokstaven og bruker variabelen "antall" for å referere til lagerplassen i primærminnet der denne verdien er lagret.
        antall = tekst.count(bokstav)
        #retunerer antall tilbake til funksjonskallet
        return antall

d)
    def lagFortegnelse(nøkkel-liste, verdi-liste):
        #oppretter en tom fortegnelse
        fortegnelse = {}

        #retunerer feilmld dersom lengden på listene er ulik 
        if len(nøkkel-liste) != len(verdi-liste)): return 'Feil:ulikt antall nøkler og verdier'
        #itererer igjennom alle nøkklene i nøkkel-listen og verdiene i verdi-listen.
        for nøkkel, verdi in nøkkel-liste, verdi-liste:
            #for en ekstra sjekk mot at koden havarerer sjekker vi om fortegnelsen allerede har denne nøkkelen. Kunne eventuelt ha gjort nøkkel-liste om til en mengde og tilbake, men kunne risikert at rekkefølgen endrer seg, og det er ikke ønskelig
            if nøkkel not in fortegnelse: 
                #legger til en nøkkel og verdien i fortegnelsen 
                fortegnelse[nøkkel] = verdi

        #retunerer fortegnelsen
        return fortengelse

3)  
a)
    #definerer en funksjon med parameter filnavn
    def lesMålinger(filnavn):
        #oppretter en tom fortegnelse: værdata
        værdata = {}

        #opner filen som er angitt via argumentet i funksjonskallet i lesemodus og kaller den 'fil', slik at man kan referere til filen senere.
        with open(filnavn, 'r') as fil:
            #itererer gjennom alle linjene i filen.
            for måling in fil:
                #fjerner evt. mellomrom og linjeskifte på slutten av linjen
                måling = måling.strip()
                #splitter linjen. Siden det er tre kolonner er det tre variabler for å lagre referansen til lagringsplassen i primærlageret verdiene er lagret.
                #antar at når en måling er gjort er alle kolonner fylt inn. Om dette ikke er tilfellet kunne man brukt try-except for å sikre koden mot havari. i except-setningen kunne man manipulert dataen, eller oversett den med continue.
                dag, type, verdi = måling.split()
                #oppretter nøkkel i fortegnelsen om den ikke finnes fra før. Legger også ved en tomliste som verdi
                if not type in værdata: værdata[type] = []
                #legger til en måling i listen av verdier med samme måling. Siden innholdet er fra en tekst-fil er all data tekst. Siden oppgaven sier at 3. kolonne er tall, kan man bruke float(verdi) uten feilmld. lagrer som tuppel i listen med verdier
                værdata[type].append((dag, float(verdi)))
        
        #retunerer fortegnelsen med værdata
        return værdata

b)
    #definerer en funksjon som tar inn værdata-fortegnelsen.
    def skrivMåleinger(værdata):
        #itererer igjennom alle typene data (nøkklene) og målingene (verdier) i værdata
        for type, måling in værdata.items():
            #printer(type)
            print(type)
            #itererer igjennom alle (dag, verdi)-tupplene i verdilisten.
            for dag, verdi in måling:
                #printer ut mellomrom (for formattering), dagen og verdien
                print('  ',dag, verdi)

c)
    definerer funksjon med parametre: måletype, dag, måleverdi og ein fortegnelse
    def registrer(måletype, dag, måleverdi, fortegnelse):
        #sjekker først om måletypen finnes i fortegnelsen
        if not måletype in fortegnelse:
            #dersom måletypen ikke finnes legger vi den til sammen med målingen
            fortegnelse[måletype] = [(dag, måleverdi)]
            #retunerer None slik at ikke resten av koden fortsetter.
            return None

        #oppretter en variabel for å holde styr på indeksen som jeg trenger i neste del.
        i = 0
        
        #itererer igjennom listen med alle verdiene i måletype spesifisert i arguentet i funksjonskallet. Har tidligere sjekket at denne eksisterer. Fra hvordan fortegnelsen er bygd opp vet jeg at om det finnes en nøkkel finnes det også en liste med min. en verdi. 
        for dag_målt, verdi in fortegnelse[måletype]:
            #sjekker om dagen i verdien er den samme den angitt via argumentet i funksjonskallet
            if dag_målt == dag:
                #dersom lik oppdateres verdien i listen med den nye. indeksvariabelen holder styr på hvor i listen vi er.
                fortegnelse[måletype][i] = (dag, måleverdi)
                #retunerer None slik at eksekveringen av funksjonen stopper og den orginale programflyten gjennopptas
                return None
            #plusser på 1 hver iterasjon for å holde styr på hvor vi er i listen.
            i += 1

        #dersom måleverdien finnes og målingen med angitt dag ikke finnes legger vi til målingen i listen til måletypen
        fortegnelse[måletype].append((dag, måleverdi))
                
d)
    A - f3
    B - f5
    C - f4
    D - f6
    E - f1
    F - f2